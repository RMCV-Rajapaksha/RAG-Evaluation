input,actual_output,expected_output,context,retrieval_context,n_chunks_per_context,context_length,evolutions,context_quality,synthetic_input_quality,source_file
How do MCP client and server components streamline tool connections and functionality access for developers?,,"The MCP client and server components streamline tool connections and functionality access for developers by eliminating the need for developers to manually code connections between each agent and tool. Developers can simply use the MCP client to access the MCP server, which provides the necessary functionality. This setup allows developers to focus on building their applications without worrying about the underlying connections, as the MCP server handles the exposure of functionalities, making them easily consumable by MCP clients.","[""hings in the lab, right? So so uh so it's a specification and it introduces two new components to your agentic application. Uh first one is you call the MCP client right which the MCP host connect to. So you can see the MCP host MCP client and then the MCP server and then you have your set of APIs right. Uh so if you have to write this one on your own without the MCP then you have to connect each tool each of your you know uh agent to each of the tools by writing code right so when you have MCP what happens is for the developers they don't have to worry about making these connections so all they have to do is use the MCP client right and uh you can access the MCP server through the MCP client and get the functionality that you need. Right? So as far as the the people who wants to expose certain functionality so what does this provide? They don't have to worry about how it is being consumed by the clients. They will just build the MCP server which we will provide through our products as well. and then uh you can make it available so that uh MCP clients can consume. So let me see uh so there's a video here. All right, it works. So this is one of the recent MCP service which we have built. Uh so this is the MCP server for Coro which is WSO2's internal developer platform. Right. So and then we've gone and uh you know uh installed that one in VS code. So it is basically driving the full you know life cycle of this software development."", ""SO2's internal developer platform. Right. So and then we've gone and uh you know uh installed that one in VS code. So it is basically driving the full you know life cycle of this software development. So here what happens is you go we have gone and develop a service. Okay it's gone that's fine u and you want to uh then push this service to coro right so it then does various tests. Have I logged into Coro? Does the project exist? If not, let's create it and does the component exist? If not, let's create the component. So, and then, you know, let's get the build pack and so on. So, it takes you through all of those steps and finally it will push to Coro and then you can deploy it there. Right? So, so we've gone from Genai to rags to agents to MCP. Now let's get to uh multi-agent systems, right? So if you take a look at a single agent, yes, they work fine. So what happens is the systems become bigger and bigger, right? So the then you want you get to a situation where you need to connect this agent to more and more tools. This works actually for many use cases."", 'happens is the systems become bigger and bigger, right? So the then you want you get to a situation where you need to connect this agent to more and more tools. This works actually for many use cases. It works like that MCP server is connecting to lot of tools right but there are cases where you know you may have issues like uh certain accuracy related issues and so on then you have to go beyond single agent for sure right also you want to build these specialized agents domain specific agents right so so beyond certain points you need these agents uh who they are domain specific interacting with each other to solve a bigger problem. Right? So this is where the the multi- aent systems coming into the picture. Right? So the advantage of that is of course you can have specialized agents like you even within software engineering you know there might be a team who is working on one specific thing they can have a specialized agent for that right so you can independently improve that agent right prompt optimization how you connect to the tools and and so on and also this you also get the other benefits like you know once when you have it in microservices you can independently scale them optimize them and and so on. Right? So what we are seeing is uh this area is still evolving. So there are patterns that are coming up. Right? So these are not mature yet. But at least we are seeing these patterns and we we are actually using these patterns in our products also.']",,3,4005,['Multi-context'],,0.7,
Examine the integration of agent identity in IM products to enhance data security measures.,,"The integration of agent identity in IM products is aimed at enhancing data security by ensuring that agents can only perform tasks they are authorized to do. This measure helps prevent unauthorized access and data leaks, especially as agents become more autonomous and handle serious tasks. By incorporating agent identity, organizations can better control and secure the actions of these agents, aligning with discussions from both the APIM track and the AI lab.",['. So that will make sure that agents you know uh when you use agents like certain information is not getting leaked to models and all that. So this was discussed both in the APIM track and the AI lab. We also discussed uh securing agents again in the AI lab and uh in the track how to control uh you know because agents are becoming more and more autonomous and they are performing serious tasks right so there has to be a way to secure these agents and make sure that agents can only do what they can do so this is where we are bringing the agent identity into our IM products right so the another topic that is interesting testing is which is kind of becoming important is agents and SLMs which is something that we are also working on uh how to you know fine-tune these SLMs so that agents can work with them and get the level of accuracy that they need to have. So I think that would be it. Uh so and thank you very much. I would like to uh have Heat. Heat. [Music]'],,1,969,['In-Breadth'],,0.6,
How does the personalization agent in WSO2 app utilize APIs for creating user profiles?,,The personalization agent in the WSO2 app utilizes APIs to create user profiles by first using the Surfer API to perform an internet search and gather a set of links related to the user. It then employs the Scraper Web Scraper API to extract content from these links. This process is repeated until the agent achieves its goal of creating a personalized profile for the user.,"[""ther two patterns which we have described earlier and the agents. Now let's try to define what an agent is. So the definition of an agent is sort of vague but this is our definition of an agent right? uh uh so uh so agent is a system or an entity uh you know that can perform task by interacting with tools now these tools can be APIs and databases and so on with the help of a large language model right uh right so let's take a look at this uh application which we have built so this is a WSO2 mobile app we were building this uh towards the uh last uh WSO2 to con. So it we had sort of a very you know static kind of app. It didn't have any you know AI experiences so any personalized experience. So what we wanted to do is to make it better by bringing some you know personalized feeling. So then we uh you we ended up adding various features. For example it it can now give you know this personalized schedule. You have a chatbot where you can interact with uh uh these u u by the way if you haven't updated I think there has been a recent update right so please go ahead and uh update the app. Yeah let's take a look at the architecture before and after. So what we had was uh on my uh on the left hand side which basically had only two flows. One is the registration flow where you go to a website and then you register right."", ""hitecture before and after. So what we had was uh on my uh on the left hand side which basically had only two flows. One is the registration flow where you go to a website and then you register right. So that will put the details into a database and the other flow we had was just retrieving the data from this database and then you can see the sessions that are going right. So after adding all of these AI capabilities you can see you know how complex the architecture has now become. Uh so we have added various uh agents rags gen integrations into this right so today's discussion is agents right so I just want to highlight one agent which is in this app so this is the personalization agent so this is used by the other components that are in this system what it does is now when you have given the consent it will use your name and the uh the company and then it will go and do a search on the internet and it creates a personalized profile and and that agent uses two tools because remember the agents can uh you know interact with tools and perform actions."", ""it will go and do a search on the internet and it creates a personalized profile and and that agent uses two tools because remember the agents can uh you know interact with tools and perform actions. The first one is you call the surfer API where you will get set of links related to me right so I do a Google and then get a set of links and then you go and scrape the content which is what the second one do it's called scraper web scraper API right so this is not just two calls it happens times until it uh reset reaches its goal right so the next thing I want to talk about is multiple multi-agent systems but before that I want to briefly touch on MCP uh because this is something that we you know we all are aware of and we've discussed extensively in the AI labs now we know that there's an agent and there's set of tools which the agent is interacting with right so the problem that the MCP solves is MCP standardizes the way in which the AI applications s interact with these external tools, right? Uh now you can see the architecture here. So MCP has concepts like tools which is the same as the zoom tool that we were talking about resources prompts and and so on. We've discussed these things in the lab, right? So so uh so it's a specification and it introduces two new components to your agentic application. Uh first one is you call the MCP client right which the MCP host connect to.""]",,3,3798,['Constrained'],,0.6,
How does the supervisor pattern manage task flow and agent communication in multi-agent systems?,,"The supervisor pattern manages task flow and agent communication in multi-agent systems by utilizing a centralized supervisor agent. This agent is responsible for deciding which sub-agent to invoke next, effectively managing the flow of tasks. The supervisor agent can either be a full react agent, capable of reasoning and acting, or a simple router that directs tasks based on specific conditions. Communication and control flow are organized through two variants: agent-to-agent handoff, where a sub-agent receives full control and context, and agent-as-a-tool, where the sub-agent acts as a tool with limited control and specific input/output. This pattern is exemplified in the coro copilot, where the supervisor agent delegates tasks to domain-specific agents, such as those handling observability or deployment, ensuring efficient task management and communication.","[""till evolving. So there are patterns that are coming up. Right? So these are not mature yet. But at least we are seeing these patterns and we we are actually using these patterns in our products also. Uh now there's a difference. Now we earlier we talked about agents and these agents have various traits, right? So we talk about self-reflection and uh so those apply to a single agent. Now this is multi- aents and these patterns describe how these agents are organized. Is it hierarchical? Is it sort of in a network fashion? What is the communication uh how they communicate? Is it peer-to-peer uh and so on and also how is the control flow being managed right so let's take a look at one pattern and I'll show you something that we have built architecture for that uh so this is uh the supervisor pattern we are seeing this in many uh uh occasions so the key actually this is very easy to understand so uh when you look at it you will see what it is so the supervisor pattern is you have a supervisor agent which is a centralized sort of an agent. Oops. Uh that agent will manage the flow, right? That agent will decide which agent to invoke next. Now this supervisor agent which is the the top level agent, it can be a full react agent like you know we we we we spoke about react in the lab session agent that will reason and act."", ""to invoke next. Now this supervisor agent which is the the top level agent, it can be a full react agent like you know we we we we spoke about react in the lab session agent that will reason and act. It has the full reasoning loop or it can be just it can just be a router right simple prompt and describe if you get this condition you send it to that agent and otherwise send it there right now also within this we are seeing two variants. So this variant is how you does the handoff. So one type of handoff is agent to agent handoff where you give the sub agent the full control and you have to pass the full context uh and then sub agent can then uh will have access to all the memory it can control everything. So it's like one pattern we are seeing. The other one is agent as a tool right. So, so this is just the tool calling. The only thing is agent is a tool in this case. So, this way you don't give the full control and also you only give specific uh sort of pass specific uh inputs and outputs. Right? Okay. So, this is a uh this is some I don't have time to do a demo on this. This is one of the co-pilots that we have built. So, this is coro copilot. By the way, we are revamping this and there's another version that is coming up. What coro copilot does is it will let you interact with the coro platform. So we have had like several sessions on choreo. You can ask about the projects documentation, ask about like what services are having issues and so on. Right?"", ""let you interact with the coro platform. So we have had like several sessions on choreo. You can ask about the projects documentation, ask about like what services are having issues and so on. Right? So uh if you take a look at the architecture for this one, this actually follows the supervisor pattern that we were talking about. So uh so you have the first interaction with the user is with the the supervisor agent, right? uh uh and that will then delegate the task to very much domain specific set of agents. So coro we have observability coro we have marketplace coro we have testing lot of things right. So these specialized agents in fact the the team that builds that feature can uh is the team that is more capable of developing that specific. So there's if there's an observability team of course they can work with the II team as well they can they are the best teams to write the prompts to this agent right so what it happens is so if you take a look at one of these agents for example observability agents coro has lot of internal APIs right uh so it connects to those internal APIs and get the data out and also can so in observability case there's no action performance performing it's basically the retrieval but when it comes to other things like deployment that can also be done right so right so we've looked at uh geni uh rags agents mcp right and then uh multi- aent system so there are clearly we are seeing patterns Right. Okay.""]",,3,4266,['Constrained'],,0.8,
"How do AI applications integrate GenAI, RAG, and agent components within system architectures?",,"AI applications integrate GenAI, RAG, and agent components within system architectures by following specific patterns. GenAI integration involves calling GenAI APIs to support use cases like text summarization and sentiment analysis. RAG (Retrieval Augmented Generation) enhances this by grounding responses with data from a knowledge base, making it suitable for situations where models need to be aware of specific data. While GenAI and RAG are more passive, agents add proactiveness by performing actions autonomously. Successful integration depends on using the right patterns and understanding their applications within the system.","[""it's a metric that will you know look at uh you know how transparent are these companies when it comes to training these models when in terms of the data or you know when the models respond and so on. So these scores have gone up for entropic it's gone up from uh you know 15 to 51 right also those who are building these agentic uh systems putting more and more you know observability capabilities you know putting logs traces and so on. So if an agent does something then we have some level of you know understanding of what it does right okay oops right so bit about uh you know building modern AI applications so this is how we model this so uh so building modern AI applications is about you know uh connecting things together So the way we model this is you have to first build these AI components. I'll get to that in a minute. And then integrate these AI components with the other components uh that are in the system. Right? So if you take a look at building the AI components u that it itself is an integration problem for the most part. Right?"", ""these AI components with the other components uh that are in the system. Right? So if you take a look at building the AI components u that it itself is an integration problem for the most part. Right? So, so what's happening in fact is the machine learning for the most part like you know the traditional machine learning is going away and integration is becoming more and more important right so the success of this process depends on using the right patterns and also knowing which pattern to use and which pattern not to use right so we have in our AI strategy there are three core patterns that we have identified and rest of it is basically you know things that are built on top of it. These are the core patterns in Genai. So let's go through them. By the way these have been covered extensively in the lab session. So I've just got like two slides on this. First is a genai integration. So this is the one where you have a call to an geni API right nothing but that. So this pattern itself can support several use cases such as text summarization, sentiment analysis, email drafting and so on. Right? Then you get to the situation where the models are not aware of the uh you know your data."", ""an support several use cases such as text summarization, sentiment analysis, email drafting and so on. Right? Then you get to the situation where the models are not aware of the uh you know your data. So this is where the rag comes retrieval augmented generation where you can put your data into a knowledge base and at the retrieval time you can extract it and you can basically ground your responses with the data in this database right but if you take a look at uh the rag and genai uh integrations they are sort of more you know passive or reactive uh in the nature right? They they don't perform actions or you know uh they can do just the synthesis uh generation. They have the natural language understanding but uh that's probably it right. So what agents bring to the table is this proactiveness and being able to perform actions independently and autonomously. Right? So you can see in this sort of this diagram I try to identify the difference between the other two patterns which we have described earlier and the agents. Now let's try to define what an agent is. So the definition of an agent is sort of vague but this is our definition of an agent right?""]",,3,3419,['Concretizing'],,0.7,
How do A2A and ACP protocols compare in standardizing communication within multi-agent systems?,,"A2A and ACP protocols both aim to standardize communication within multi-agent systems, but they have different origins and features. A2A, developed by Google, focuses on standardizing agent-to-agent communication by providing features like a standardized transport protocol (JSNRPC) and an agent card concept for sharing agent details such as skills and data formats. ACP, developed by IBM, is another protocol for agent communication, though specific features of ACP are not detailed in the context. Both protocols address the challenge of enabling agents to understand each other's capabilities and data formats, facilitating smoother interactions in multi-agent environments.","[""things like deployment that can also be done right so right so we've looked at uh geni uh rags agents mcp right and then uh multi- aent system so there are clearly we are seeing patterns Right. Okay. So the other topic that is becoming important is agent to agent communication. Right. So uh so there are standard protocols that are coming up right. Uh which that tries to standardize the agentto agent communication like how MCP standardized the AI applications to tools communication. So M MCP complements agent to agent communication right now. Uh again these things are still evolving. So there's number of protocols that are there. So one is uh uh A2A which is probably the most uh popular one right by Google and then there's ACP agent communication protocol by IBM and there are few other protocols as well. So so let's try to understand what problem that A2A or a these agentto agent communication protocols try to solve. So I'm not going to go to the go to lot of details but I just want to give a high level you know idea about that. So if you are building a multi- aent system which we saw before you have multiple agents communicating in you know different ways. Uh now one agent does not know what the other agent does right. So that problem is there. For example, uh what skill that this other agent has, what data format that I need to send it to, right? Uh and what it what does it return? What are the data types? Is it text, video, uh voice and so on, right?"", "", uh what skill that this other agent has, what data format that I need to send it to, right? Uh and what it what does it return? What are the data types? Is it text, video, uh voice and so on, right? So this is where the uh A2A comes in. Uh by the way this is only one specific protocol. So A2A standardizes agentto agent communication and it A2A has uh various set of features to do this. First of all, it has a standardized communication the transport protocol which is JSNRPC and also there is other capabilities in A2A specification which will let you know other agents to get to know about one specific agent. So for example in A2A there is a concept called agent card where you can go and give a name description URL v version skills and ID description all of those stuff right uh so that is how uh A2A works so let me actually skip these slides I want to try to conclude this uh one properly right so let's try to uh summarize since we are getting to the end of the presentation right so we started off with jai right simple integrations and that's it and that wasn't enough then came the the rag which will let you ground the answers with the real data soon we needed agents right and uh okay by the way MCP came recently but multi- aents were there before so it's not exactly this Right. Um I'm trying to build the story from complexity smallest complexity to bigger. Right. So yes, MCP was there. MCP standardizes how the AI applications not necessarily agents."", ""s not exactly this Right. Um I'm trying to build the story from complexity smallest complexity to bigger. Right. So yes, MCP was there. MCP standardizes how the AI applications not necessarily agents. It's any kind of AI applications. I wanted to point out that and then single agent wasn't enough. Then you need multi- aents to communicate. And then there's various patterns that are coming up supervisor pattern network hierarchical and and so on. Then you need a standard for these agents to uh communicate right. This is where the agent to agent protocols are coming up and A2A is one of them. So this evolution will continue right as agents become capable and autonomous more and more. So let's go to the next slide. Okay. So what did we not discuss which is important. So we didn't discuss in detail evaluation of agents which we can touch on the the panel uh discussion. We've discussed uh about guardrails. So that will make sure that agents you know uh when you use agents like certain information is not getting leaked to models and all that. So this was discussed both in the APIM track and the AI lab.""]",,3,4061,['Comparative'],,0.8,
How has Malit Jing's dual VP role influenced WSO2's AI strategy and product development?,,"Malit Jing's dual role as VP of Research and VP of AI at WSO2 has significantly influenced the company's AI strategy and product development. His extensive experience in distributed systems and AI has enabled him to work closely with product teams to define and implement WSO2's AI strategy. This strategy is twofold: ""AI for code,"" which focuses on enhancing the developer experience by integrating AI capabilities into WSO2's products, and ""code for AI,"" which involves building AI applications and developing necessary abstractions like AI gateways and IM agents. His leadership has been pivotal in driving innovation and improving the user experience of WSO2's products.","[""So I am both the track lead and the I'm a speaker as well. So looks like I have to introduce myself but I won't spend a lot of time on the introduction. So my name is Malit Jing. I'm the VP of research and VP of AI at WSO2. So I've been with WSO2 for nearly 10 years. I'm a both distributed systems and AI guy. So worked a lot on the distributor systems in the early part of the career. Now sort of moved into uh AI um so I worked very closely with the product teams and also helped to define the AI strategy for WSO2. So we have two sides of our AI strategy. One is we called AI for code which is about the developer experience and how we you know bring capabilities features into our products to improve the develop experience of the users who are using our products. The other one is we called code for AI and that is all about building AI applications. What are the abstractions that are needed to build these AI apps? So that is the AI gateways you know IM agents and so on right so let's get uh started um I think you can start the clock so um so what I'm going to be talking about today is the evolution of AI agents not the evaluation evolution right so I thought it would be a good idea to have a summary like this uh then I will link to uh today's uh presentation. So this is an art summary of an article that was uh why that one works right >> this one. >> Yeah. Okay. Summary of an article that was published by McKenzie. Uh uh so I've uh let me take you through these."", ""s is an art summary of an article that was uh why that one works right >> this one. >> Yeah. Okay. Summary of an article that was published by McKenzie. Uh uh so I've uh let me take you through these. So these are the key innovations which they identify uh as driving the current AI adaption. So first of all we see clearly uh the models are becoming more and more powerful right. So they are becoming experts. So you see in these tests that were given to these models such as SAT or for example this uh US medical exam GPT4 can achieve 90%. For that right and also at the same time reasoning capabilities are improving. So Nadish did a great uh session on the lab where we looked at different prompting techniques right. So there was things like coot chain of thought. uh now these things are no longer needed for these advanced models right so so a lot of stuff that we had to do when we write prompts now it's sort of moved to the the models right and also there is these models that are coming up like uh you know they can do very advanced uh uh reasoning like you know open AI's model right right so that's one area which is you really really you know improving and the second one is the today's topic which is the agentic I'm not going to go to the details of it so it's about you know agents being able to reason and act and perform tasks third one is the multi- uh modality so it's not just the text that is been improved the text models been improved we are clearly seeing improvements in th"", ""eing able to reason and act and perform tasks third one is the multi- uh modality so it's not just the text that is been improved the text models been improved we are clearly seeing improvements in the other areas us as well. For example, video voice, right? If you've gone and talked to unitary dog outside, you know, the the interactions are becoming more natural and becoming real time and also the hardware uh innovation, right? So for the most part there's a lot of people are still having issues with scalability, right? Scaling AI is a big problem. So we are seeing like the the speed is improving and which is we been able to support these realtime uh extraction uh you know interactions and these capabilities being you know able to access on the cloud and also on the edge. The other one is transparency and explanability. So those who worked in this area you know like this is an issue anyway for machine learning right? So uh it is still an issue but we are clearly seeing progress. So there's this score called transparency score. I'm not sure whether you have heard of it. Basically it's a metric that will you know look at uh you know how transparent are these companies when it comes to training these models when in terms of the data or you know when the models respond and so on.""]",,3,4278,['Multi-context'],,0.6,
